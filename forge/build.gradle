import net.darkhax.curseforgegradle.TaskPublishCurseForge

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.modrinth.minotaur"
apply plugin: "net.darkhax.curseforgegradle"

apply from: "$rootDir/publishing.gradle"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "bridgingmod.mixins.json"
    }
}


configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileOnly.extendsFrom common
    runtimeOnly.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        url "https://maven.neoforged.net/releases/"
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }
}

dependencies {
    String neoForge = rootProject.use_neoforge;
    String forgeString

    if(neoForge == "true") {
        forgeString = "net.neoforged:forge:${rootProject.forge_version}"
    } else {
        forgeString = "net.minecraftforge:forge:${rootProject.forge_version}"
    }

    System.out.println("%s, %s".formatted(neoForge, forgeString))

    forge forgeString

    modImplementation "dev.isxander:yet-another-config-lib:${project.yacl_version}-forge"

    modCompileOnly(fileTree(dir: 'jarDeps', include: '*.jar'))
    modCompileOnly("maven.modrinth:dynamiccrosshair:${rootProject.dynamiccrosshair_version_forge}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [ project.configurations.shadowCommon ]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("release")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

modrinth {
    String[] versions = getSupportedVersions(project.properties);

    token = getModrinthToken(project)
    projectId = "bridging-mod"
    versionName = "Bridging Mod ${formattedBaseVersion} (Forge)"
    versionNumber = project.version.toString()
    versionType = project.properties["release_type"].toString()
    uploadFile = remapJar
    gameVersions = Arrays.asList(versions)
    loaders = [ "forge" ]

    changelog = new File(project.getRootDir(), "changelog.md").readLines().join("\n")

    var shouldPublish = project.properties["debug_publishing"]
    if(shouldPublish != null && shouldPublish.toString().equalsIgnoreCase("true"))
        setDebugMode(true)

    dependencies {
        required.project "yacl"
    }
}

tasks.register('curseforge', TaskPublishCurseForge) {
    group = "publishing"
    description = "Publishes project to CurseForge"

    String mcVer = project.properties["minecraft_version"]
    String projectVer = project.properties["mod_version"]
    String projectId = project.properties["curseforge_project"]

    if(projectVer == null || projectVer.isBlank())
        throw new IllegalStateException("Project version should not be null when publishing.")

    apiToken = getCurseToken(project)

    var shouldPublish = project.properties["debug_publishing"]
    if(shouldPublish != null && shouldPublish.toString().equalsIgnoreCase("true"))
        debugMode = true

    def mainFile = upload(projectId, remapJar)
    mainFile.displayName = "[Forge %s] v%s Bridging Mod".formatted(mcVer, projectVer)
    mainFile.addModLoader("forge")
    mainFile.releaseType = project.properties["release_type"]

    mainFile.changelogType = "markdown"
    mainFile.changelog = new File(project.getRootDir(), "changelog.md")

    for(String version: getSupportedVersions(project.properties))
        mainFile.addGameVersion(version)

    mainFile.addRequirement("yacl")

}