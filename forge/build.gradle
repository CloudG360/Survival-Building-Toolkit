apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.modrinth.minotaur"
apply plugin: "net.darkhax.curseforgegradle"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "bridgingmod.mixins.json"
    }
}


configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileOnly.extendsFrom common
    runtimeOnly.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        url "https://maven.neoforged.net/releases/"
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    modApi("me.shedaniel.cloth:cloth-config-forge:${project.clothconfig_version}")
    modCompileOnly("maven.modrinth:dynamiccrosshair:${rootProject.dynamiccrosshair_version_forge}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [ project.configurations.shadowCommon ]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("release")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}