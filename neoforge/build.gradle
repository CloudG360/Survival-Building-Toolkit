import net.darkhax.curseforgegradle.TaskPublishCurseForge

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.modrinth.minotaur"
apply plugin: "net.darkhax.curseforgegradle"

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}


configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileOnly.extendsFrom common
    runtimeOnly.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        url "https://maven.neoforged.net/releases/"
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    modApi("me.shedaniel.cloth:cloth-config-neoforge:${project.clothconfig_version}")
    modCompileOnly("maven.modrinth:dynamiccrosshair:${rootProject.dynamiccrosshair_version_forge}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [ project.configurations.shadowCommon ]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("release")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}


modrinth {
    String[] versions = getSupportedVersions(project.properties);

    token = getModrinthToken(project)
    projectId = "bridging-mod"
    versionName = "Bridging Mod ${formattedBaseVersion} (NeoForge)"
    versionNumber = project.version.toString()
    versionType = project.properties["release_type"].toString()
    uploadFile = remapJar
    gameVersions = Arrays.asList(versions)
    loaders = [ "neoforge" ]

    var shouldPublish = project.properties["debug_publishing"]
    if(shouldPublish != null && shouldPublish.toString().equalsIgnoreCase("true"))
        setDebugMode(true)

    dependencies {
        required.project "cloth-config"
    }
}

tasks.register('curseforge', TaskPublishCurseForge) {
    group = "publishing"
    description = "Publishes project to CurseForge"

    String[] minecraftVersions = getSupportedVersions(project.properties)
    String mcVer = minecraftVersions.size() > 0
            ? minecraftVersions[0]
            : "any"
    String projectVer = project.properties["mod_version"]
    String projectId = project.properties["curseforge_project"]

    if(projectVer == null || projectVer.isBlank())
        throw new IllegalStateException("Project version should not be null when publishing.")

    apiToken = getCurseToken(project)

    var shouldPublish = project.properties["debug_publishing"]
    if(shouldPublish != null && shouldPublish.toString().equalsIgnoreCase("true"))
        debugMode = true

    def mainFile = upload(projectId, remapJar)
    mainFile.displayName = "[NeoForge %s] v%s Bridging Mod".formatted(mcVer, projectVer)
    mainFile.addModLoader("neoforge")
    mainFile.releaseType = project.properties["release_type"]

    mainFile.addRequirement("cloth-config")
}