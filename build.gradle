plugins {
	id "architectury-plugin" version "3.4-SNAPSHOT"
	id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
}

boolean isModVersionDefined = project.properties["mod_version"] == null ||
		project.properties["mod_version"].toString().length() == 0;

String modVer = isModVersionDefined
		? "indev"
		: project.properties["mod_version"].toString()


architectury {
	minecraft = rootProject.minecraft_version
}

subprojects {
	apply plugin: "dev.architectury.loom"

	loom {
		silentMojangMappingsLicense()
	}

	dependencies {
		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"

		mappings loom.layered() {
			officialMojangMappings()

			if(project.parchment_version != "")
				parchment("org.parchmentmc.data:${project.parchment_version}@zip")
		}
	}
}

allprojects {
	apply plugin: "java"
	apply plugin: "architectury-plugin"
	apply plugin: "maven-publish"

	base.archivesName = rootProject.archives_base_name
	group = rootProject.maven_group
	version = "%s+%s.%s".formatted(modVer, project.properties["minecraft_version"], project.name)

	repositories {
		maven {
			name = 'ParchmentMC'
			url = "https://maven.parchmentmc.org/"
		}

		// Mod Deps
		maven { url "https://maven.shedaniel.me/" }
		maven { url "https://maven.terraformersmc.com/releases/" }
		maven {
			name = "Modrinth"
			url = "https://api.modrinth.com/maven"
			content {
				includeGroup "maven.modrinth"
			}
		}
	}


	tasks.withType(JavaCompile).configureEach {
		options.encoding = "UTF-8"
		options.release.set(17)

		// Shows details related to the xlint "unchecked" and "derecation" warning notes.
		if (rootProject.properties["show_dev_warnings"] == "true") {
			it.options.deprecation = true
			it.options.compilerArgs << '-Xlint:unchecked'
		}
	}

	java {
		withSourcesJar()
	}
}

tasks.register('updateDocTemplates', Copy) {
	group = "mod-utils"
	description = "Takes documents from a folder, expands any template variables, and then copies them to the root."
	doNotTrackState("Stops gradle from screaming - It doesn't let files get copied to the root if tracking state.")

	HashMap modifiedSrc = new HashMap<>(project.properties)

	from "/template_docs"

	into "/"
	include "**"
	exclude "media/**"

	expand modifiedSrc
}

def cleanAll = tasks.register('cleanAll') {
	group = "modgradle"
	description = "Runs a clean operation on every project"
	dependsOn allprojects.collect({ it.tasks.named('clean') })
}

def collectJars = tasks.register('collectJars', Copy) {
	group = "modgradle"
	description = "Used to gather all the jars that can be published"
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
	dependsOn subprojects.collect({
		def discovered = it.tasks.findAll {
			it.name == "remapSourcesJar" || it.name == "remapJar"
		}

		return discovered == null
				? []
				: discovered;
	})

	def jarHolderDirs = []

	subprojects.each {
		File target = new File(it.buildDir, "libs")
		jarHolderDirs.add(target)
	}


	from jarHolderDirs
	include("*-release.jar")
	rename { String name -> name.substring(0, name.length() - 12) + ".jar" }
	into "$buildDir/for-publishing"
}
